// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/classify/classified-articles.proto

package classified_articles

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClassifiedArticles struct {
	Articles             []*ClassifiedArticle `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClassifiedArticles) Reset()         { *m = ClassifiedArticles{} }
func (m *ClassifiedArticles) String() string { return proto.CompactTextString(m) }
func (*ClassifiedArticles) ProtoMessage()    {}
func (*ClassifiedArticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_38b232fc129f1144, []int{0}
}
func (m *ClassifiedArticles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassifiedArticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassifiedArticles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassifiedArticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassifiedArticles.Merge(m, src)
}
func (m *ClassifiedArticles) XXX_Size() int {
	return m.Size()
}
func (m *ClassifiedArticles) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassifiedArticles.DiscardUnknown(m)
}

var xxx_messageInfo_ClassifiedArticles proto.InternalMessageInfo

func (m *ClassifiedArticles) GetArticles() []*ClassifiedArticle {
	if m != nil {
		return m.Articles
	}
	return nil
}

type ClassifiedArticle struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Classification       int32    `protobuf:"varint,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClassifiedArticle) Reset()         { *m = ClassifiedArticle{} }
func (m *ClassifiedArticle) String() string { return proto.CompactTextString(m) }
func (*ClassifiedArticle) ProtoMessage()    {}
func (*ClassifiedArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_38b232fc129f1144, []int{1}
}
func (m *ClassifiedArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassifiedArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassifiedArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassifiedArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassifiedArticle.Merge(m, src)
}
func (m *ClassifiedArticle) XXX_Size() int {
	return m.Size()
}
func (m *ClassifiedArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassifiedArticle.DiscardUnknown(m)
}

var xxx_messageInfo_ClassifiedArticle proto.InternalMessageInfo

func (m *ClassifiedArticle) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClassifiedArticle) GetClassification() int32 {
	if m != nil {
		return m.Classification
	}
	return 0
}

func init() {
	proto.RegisterType((*ClassifiedArticles)(nil), "ClassifiedArticles")
	proto.RegisterType((*ClassifiedArticle)(nil), "ClassifiedArticle")
}

func init() {
	proto.RegisterFile("pkg/classify/classified-articles.proto", fileDescriptor_38b232fc129f1144)
}

var fileDescriptor_38b232fc129f1144 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0xc8, 0x4e, 0xd7,
	0x4f, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xab, 0x84, 0x31, 0x32, 0x53, 0x53, 0x74, 0x13, 0x8b,
	0x4a, 0x32, 0x93, 0x73, 0x52, 0x8b, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x95, 0x5c, 0xb8, 0x84,
	0x9c, 0xe1, 0x92, 0x8e, 0x50, 0x39, 0x21, 0x3d, 0x2e, 0x0e, 0x98, 0x3a, 0x09, 0x46, 0x05, 0x66,
	0x0d, 0x6e, 0x23, 0x21, 0x3d, 0x0c, 0x65, 0x41, 0x70, 0x35, 0x4a, 0xde, 0x5c, 0x82, 0x18, 0xd2,
	0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x4c, 0x99, 0x29,
	0x42, 0x6a, 0x5c, 0x7c, 0x30, 0x77, 0x24, 0x27, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x81, 0xe5,
	0xd0, 0x44, 0x9d, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x6e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xea, 0x45, 0x95, 0xe9, 0xd5, 0x00, 0x00, 0x00,
}

func (m *ClassifiedArticles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassifiedArticles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassifiedArticles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Articles) > 0 {
		for iNdEx := len(m.Articles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Articles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClassifiedArticles(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClassifiedArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassifiedArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassifiedArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Classification != 0 {
		i = encodeVarintClassifiedArticles(dAtA, i, uint64(m.Classification))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintClassifiedArticles(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassifiedArticles(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassifiedArticles(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassifiedArticles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for _, e := range m.Articles {
			l = e.Size()
			n += 1 + l + sovClassifiedArticles(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClassifiedArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovClassifiedArticles(uint64(m.Id))
	}
	if m.Classification != 0 {
		n += 1 + sovClassifiedArticles(uint64(m.Classification))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClassifiedArticles(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassifiedArticles(x uint64) (n int) {
	return sovClassifiedArticles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassifiedArticles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassifiedArticles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassifiedArticles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassifiedArticles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassifiedArticles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassifiedArticles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassifiedArticles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Articles = append(m.Articles, &ClassifiedArticle{})
			if err := m.Articles[len(m.Articles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassifiedArticles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassifiedArticles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassifiedArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassifiedArticles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassifiedArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassifiedArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassifiedArticles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classification", wireType)
			}
			m.Classification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassifiedArticles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Classification |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClassifiedArticles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassifiedArticles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassifiedArticles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassifiedArticles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassifiedArticles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassifiedArticles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassifiedArticles
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassifiedArticles
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassifiedArticles
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassifiedArticles        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassifiedArticles          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassifiedArticles = fmt.Errorf("proto: unexpected end of group")
)
