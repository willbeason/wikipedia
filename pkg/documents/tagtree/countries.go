package tagtree

import (
	"regexp"
	"strings"
)

var countriesList = []string{
	"Afghanistan",
	"Albania",
	"Algeria",
	"Andorra",
	"Angola",
	"Antigua and Barbuda",
	"Argentina",
	"Armenia",
	"Australia",
	"Austria",
	"Azerbaijan",
	"Bahamas",
	"Bahrain",
	"Bangladesh",
	"Barbados",
	"Belarus",
	"Belgium",
	"Belize",
	"Benin",
	"Bhutan",
	"Bolivia",
	"Bosnia and Herzegovina",
	"Botswana",
	"Brazil",
	"Brunei",
	"Bulgaria",
	"Burkina Faso",
	"Burundi",
	"CÃ´te d'Ivoire",
	"Cabo Verde",
	"Cambodia",
	"Cameroon",
	"Canada",
	"Central African Republic",
	"Chad",
	"Chile",
	"China",
	"Colombia",
	"Comoros",
	"Congo",
	"Costa Rica",
	"Croatia",
	"Cuba",
	"Cyprus",
	"Czech Republic",
	"Republic of the Congo",
	"Denmark",
	"Djibouti",
	"Dominica",
	"Dominican Republic",
	"Ecuador",
	"Egypt",
	"El Salvador",
	"Equatorial Guinea",
	"Eritrea",
	"Estonia",
	"Eswatini",
	"Ethiopia",
	"Fiji",
	"Finland",
	"France",
	"Gabon",
	"Gambia",
	"Georgia",
	"Germany",
	"Ghana",
	"Greece",
	"Grenada",
	"Guatemala",
	"Guinea",
	"Guinea-Bissau",
	"Guyana",
	"Haiti",
	"Holy See",
	"Honduras",
	"Hungary",
	"Iceland",
	"India",
	"Indonesia",
	"Iran",
	"Iraq",
	"Ireland",
	"Israel",
	"Italy",
	"Jamaica",
	"Japan",
	"Jordan",
	"Kazakhstan",
	"Kenya",
	"Kiribati",
	"Kuwait",
	"Kyrgyzstan",
	"Laos",
	"Latvia",
	"Lebanon",
	"Lesotho",
	"Liberia",
	"Libya",
	"Liechtenstein",
	"Lithuania",
	"Luxembourg",
	"Madagascar",
	"Malawi",
	"Malaysia",
	"Maldives",
	"Mali",
	"Malta",
	"Marshall Islands",
	"Mauritania",
	"Mauritius",
	"Mexico",
	"Micronesia",
	"Moldova",
	"Monaco",
	"Mongolia",
	"Montenegro",
	"Morocco",
	"Mozambique",
	"Myanmar (formerly Burma)",
	"Namibia",
	"Nauru",
	"Nepal",
	"Netherlands",
	"New Zealand",
	"Nicaragua",
	"Niger",
	"Nigeria",
	"North Korea",
	"North Macedonia",
	"Norway",
	"Oman",
	"Pakistan",
	"Palau",
	"Palestine State",
	"Panama",
	"Papua New Guinea",
	"Paraguay",
	"Peru",
	"Philippines",
	"Poland",
	"Portugal",
	"Qatar",
	"Romania",
	"Russia",
	"Rwanda",
	"Saint Kitts and Nevis",
	"Saint Lucia",
	"Saint Vincent and the Grenadines",
	"Samoa",
	"San Marino",
	"Sao Tome and Principe",
	"Saudi Arabia",
	"Senegal",
	"Serbia",
	"Seychelles",
	"Sierra Leone",
	"Singapore",
	"Slovakia",
	"Slovenia",
	"Solomon Islands",
	"Somalia",
	"South Africa",
	"South Korea",
	"South Sudan",
	"Spain",
	"Sri Lanka",
	"Sudan",
	"Suriname",
	"Sweden",
	"Switzerland",
	"Syria",
	"Tajikistan",
	"Tanzania",
	"Thailand",
	"Timor-Leste",
	"Togo",
	"Tonga",
	"Trinidad and Tobago",
	"Tunisia",
	"Turkey",
	"Turkmenistan",
	"Tuvalu",
	"Uganda",
	"Ukraine",
	"United Arab Emirates",
	"United Kingdom",
	"United States of America",
	"Uruguay",
	"Uzbekistan",
	"Vanuatu",
	"Venezuela",
	"Vietnam",
	"Yemen",
	"Zambia",
	"Zimbabwe",
}

var countriesPattern = regexp.MustCompile(`(?i)` + strings.Join(countriesList, "|"))

type NodeTitleCountry struct{}

func (n *NodeTitleCountry) String(title string) string {
	switch countries := countriesPattern.FindAllString(title, -1); len(countries) {
	case 0:
		return "<COUNTRY NOT FOUND>"
	case 1:
		return countries[0]
	default:
		return "<MULTIPLE COUNTRIES FOUD"
	}
}

type Continent string

const (
	Asia         = "Asia"
	Africa       = "Africa"
	NorthAmerica = "North America"
	SouthAmerica = "South America"
	Antarctica   = "Antarctica"
	Europe       = "Europe"
	Oceania      = "Oceania"
)

var (
	continentOf = map[string]string{
		"Australia":      Oceania,
		"Bangladesh":     Asia,
		"Canada":         NorthAmerica,
		"China":          Asia,
		"France":         Europe,
		"Germany":        Europe,
		"India":          Asia,
		"Italy":          Europe,
		"Japan":          Asia,
		"Mexico":         NorthAmerica,
		"New Zealand":    Oceania,
		"North Korea":    Asia,
		"Philippines":    Asia,
		"Romania":        Europe,
		"Russia":         Asia,
		"Spain":        Europe,
		"South Korea":    Asia,
		"Thailand":       Asia,
		"United Kingdom": Europe,

		"Netherlands": Europe,
		"Portugal": Europe,
		"Switzerland": Europe,
		"Belgium": Europe,
		"Poland": Europe,
		"Pakistan": Asia,
		"Austria": Europe,
		"South Africa": Africa,
		"Sweden": Europe,
		"Hungary": Europe,
		"Egypt": Africa,
		"Niger": Africa,
		"Turkey": Asia,
		"Kazakhstan": Asia,
		"Czech Republic": Europe,
		"Indonesia": Asia,
		"Serbia": Europe,
		"Croatia": Europe,
		"Bulgaria": Europe,
		"United Arab Emirates": Asia,
		"Vietnam": Asia,
		"Malaysia": Asia,
		"Slovenia": Europe,
		"Brunei": Asia,
		"Syria": Asia,
		"Estonia": Europe,
		"Malta": Europe,
		"Mongolia": Asia,
		"Iraq": Asia,
		"Kenya": Africa,
		"Montenegro": Europe,
		"Chile": SouthAmerica,
		"Guyana": SouthAmerica,
		"Burundi": Africa,
		"Chad": Africa,
		"Mozambique": Africa,
		"South Sudan": Africa,
		"Moldova": Europe,
		"Botswana": Africa,
		"Algeria": Africa,
		"Togo": Africa,
		"Tajikistan": Asia,
		"Lebanon": Asia,
		"Cameroon": Africa,
		"Mauritius": Africa,
		"Ghana": Africa,
		"Denmark": Europe,
		"Uruguay": SouthAmerica,
		"Nepal": Asia,
		"Israel": Asia,
		"Monaco": Europe,
		"Senegal": Africa,
		"Republic of the Congo": Africa,

	}

	MissedCountryContinent = map[string]int{}
)

type NodeCountry2Continent struct {
	Value Node
}

func (n *NodeCountry2Continent) String(title string) string {
	v := n.Value.String(title)

	continent, found := continentOf[v]
	if !found {
		MissedCountryContinent[v]++
		return "<MISSING COUNTRY CONTINENT>"
	}

	return continent
}
